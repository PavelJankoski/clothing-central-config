spring.application.name=order-management-service
#spring.cloud.config.uri=http://localhost:8888
#management.endpoints.web.exposure.include=*
server.port=8081

spring.datasource.url=jdbc:postgresql://localhost:5432/cs_orders
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# Hikari will use the above plus the following to setup connection pooling
spring.datasource.hikari.minimumIdle=3
spring.datasource.hikari.maximumPoolSize=500
spring.datasource.hikari.idleTimeout=30000
spring.datasource.hikari.poolName=SpringBootJPAHikariCP
spring.datasource.hikari.maxLifetime=2000000
spring.datasource.hikari.connectionTimeout=30000
spring.datasource.pool-prepared-statements=true
spring.datasource.max-open-prepared-statements=250
spring.jpa.hibernate.connection.provider_class=org.hibernate.hikaricp.internal.HikariCPConnectionProvider
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL82Dialect

#Hibernate Configuration
spring.jpa.generate-ddl = true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

##Security parameter##
client_id=User
client_credential=bar
check_authorization_url=http://localhost:8080/oauth/check_token
resource_id=order-resource

# stripe - properties
stripe.key.public = pk_test_51KNnzhJzZYu9pfEvZ1eZzMQ1raUfrs0nUa9ayGlefRCuJVrXHBsgitAWYj09NAXjK5GLOKONlz06h2af4VCwLpmv00fDOW7BQN
stripe.key.secret = sk_test_51KNnzhJzZYu9pfEvMlNQ9cmORAnyoy9FILTCiPHWiQ4Ur25W2oNUa8mQUsgbI4Vblk6unOYSajGWemaZKytwy2ok00cFiSSxDh


eureka.instance.preferIpAddress=true
eureka.instance.hostname=eureka-0
eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true
eureka.client.service-url.defaultZone=http://eureka-0.eureka.default.svc.cluster.local:8761/eureka